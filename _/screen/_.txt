// let row_pitch = mapped.RowPitch as usize;
// let ptr = mapped.pData as *const u8;

// let mut img = ImageBuffer::<Rgba<u8>, Vec<u8>>::new(desc.Width, desc.Height);
// let buffer = img.as_mut();

// let width = desc.Width as usize;
// let height = desc.Height as usize;

// unsafe {
//   for y in 0..height {
//     let src_row = ptr.add(y * row_pitch);
//     let dst_row = buffer.as_mut_ptr().add(y * width * 4);

//     for x in 0..width {
//       let src_px = src_row.add(x * 4);
//       let dst_px = dst_row.add(x * 4);

//       *dst_px = *src_px.add(2); // R
//       *dst_px.add(1) = *src_px.add(1); // G
//       *dst_px.add(2) = *src_px; // B
//       *dst_px.add(3) = *src_px.add(3); // A
//     }
//   }
// }

// img.save("subregion.png").unwrap();

// handle.push(thread::spawn(
//   #[inline(always)]
//   move || {
//     let data_2 = data(x / 8, y / 16, x, y);
//     let data_1 = data(x / 4, y / 16, x, y);
//     let freq_1 = MS * HZ;
//     let mut an = 0;

//     loop {
//       an = f1(an);

//       match an {
//         2..=i32::MAX => sure(|| send(&i1, (an, data_2.nx, data_2.ny, screen(&data_2))), freq_1),
//         1 => sure(|| send(&i1, (an, data_1.nx, data_1.ny, screen(&data_1))), freq_1),
//         _ => xo(MS),
//       };
//     }
//   },
// ));

// #[inline(always)]
// pub fn screen(detail_1: &Data) -> Vec<u8> {
//   let mut buffer = vec![0u8; detail_1.az];

//   unsafe { BitBlt(detail_1.memory, 0, 0, detail_1.nx, detail_1.ny, detail_1.screen, detail_1.ax, detail_1.ay, SRCCOPY).unwrap() };

//   unsafe { GetBitmapBits(detail_1.bitmap, detail_1.az as i32, buffer.as_mut_ptr().cast()) };

//   buffer
// }

// #[inline(always)]
// pub fn data(nx: i32, ny: i32, zx: i32, zy: i32) -> Data {
//   let screen = Some(unsafe { GetDC(Some(HWND::default())) });
//   let memory = unsafe { CreateCompatibleDC(screen) };

//   let bitmap = unsafe { CreateCompatibleBitmap(screen.unwrap(), nx, ny) };
//   unsafe { SelectObject(memory, bitmap.into()) };

//   let az = ((ny * nx) as usize) * size_of::<u32>();
//   let ay = (zy / 2) - (ny / 2);
//   let ax = (zx / 2) - (nx / 2);

//   Data {
//     screen,
//     memory,
//     bitmap,
//     az,
//     ny,
//     nx,
//     ay,
//     ax,
//   }
// }

// pub struct Data {
//   bitmap: HBITMAP,
//   screen: Option<HDC>,
//   memory: HDC,
//   az: usize,
//   nx: i32,
//   ny: i32,
//   ay: i32,
//   ax: i32,
// }

// #[inline(always)]
// pub fn send<T>(i: &Sender<T>, o: T) -> bool {
//   i.try_send(o).is_ok()
// }

// Gdi::{
//   BitBlt,
//   CreateCompatibleBitmap,
//   CreateCompatibleDC,
//   GetBitmapBits,
//   GetDC,
//   HBITMAP,
//   HDC,
//   SRCCOPY,
//   SelectObject,
// },

// let data = std::slice::from_raw_parts(mapped.pData as *const u8, (mapped.RowPitch * desc.Height) as usize);
// if let Some(img) = image::ImageBuffer::<image::Rgb<u8>, Vec<u8>>::from_raw(width, height, data.chunks_exact(4).flat_map(|p| [p[2], p[1], p[0]]).collect()) {
//   img.save("a.png").unwrap();
// }

// Process BGRA data (4 bytes per pixel)
// for y in 0..desc.Height {
//   for x in 0..desc.Width {
//     let pixel_start = (y * mapped.RowPitch as u32 + x * 4) as usize;
//     let b = data[pixel_start];
//     let g = data[pixel_start + 1];
//     let r = data[pixel_start + 2];
//     let a = data[pixel_start + 3];

//     println!("{}, {}, {}, {}", b, g, r, a);
//   }
// }

let collect: Vec<u8> = buffer.chunks_exact(4).flat_map(|p| [p[2], p[1], p[0]]).collect();
match ImageBuffer::<Rgb<u8>, Vec<u8>>::from_raw(wide as u32, high as u32, collect) {
  Some(img) => {
    img.save(format!("_/screen/_/1.png")).unwrap();
  },
  None => (),
}
